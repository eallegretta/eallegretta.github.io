window.paletools = window.paletools || {};
window.paletools['palesnipe-1.9'] = "KGZ1bmN0aW9uIChidXR0b25zKSB7DQogICAgY29uc3QgVkVSU0lPTiA9ICJ2MS45IjsNCg0KICAgIGJ1dHRvbnMgPSAkLmV4dGVuZCh7DQogICAgICAgIGJhY2s6IDQ5LA0KICAgICAgICBlbmFibGVEaXNhYmxlOiA5MiwNCiAgICAgICAgbGlzdHM6IHsNCiAgICAgICAgICAgIHVwOiAzOCwNCiAgICAgICAgICAgIGRvd246IDQwLA0KICAgICAgICAgICAgcHJldjogMzcsDQogICAgICAgICAgICBuZXh0OiAzOSwNCiAgICAgICAgfSwNCiAgICAgICAgc2VhcmNoOiB7DQogICAgICAgICAgICBkZWNNaW5CaWQ6IDM3LA0KICAgICAgICAgICAgaW5jTWluQmlkOiAzOSwNCiAgICAgICAgICAgIGRlY01heEJpZDogMzUsDQogICAgICAgICAgICBpbmNNYXhCaWQ6IDM2LA0KICAgICAgICAgICAgZGVjTWluQnV5OiA0NiwNCiAgICAgICAgICAgIGluY01pbkJ1eTogMzQsDQogICAgICAgICAgICBkZWNNYXhCdXk6IDQwLA0KICAgICAgICAgICAgaW5jTWF4QnV5OiAzOCwNCiAgICAgICAgICAgIHNlYXJjaDogNTANCiAgICAgICAgfSwNCiAgICAgICAgcmVzdWx0czogew0KICAgICAgICAgICAgYmlkOiA1MiwNCiAgICAgICAgICAgIGJ1eTogNTEsDQogICAgICAgICAgICB0cmFuc2ZlcjogODIsDQogICAgICAgICAgICBjbHViOiA2NywNCiAgICAgICAgICAgIHByZXNzRW50ZXI6IHRydWUsDQogICAgICAgICAgICBhdXRvQnV5OiBmYWxzZSwNCiAgICAgICAgICAgIHByZXZlbnRCYWNrOiBmYWxzZSwNCiAgICAgICAgICAgIHNlbGw6IDgxLA0KICAgICAgICAgICAgZGVjQmlkOiA0NiwNCiAgICAgICAgICAgIGluY0JpZDogMzQNCiAgICAgICAgfQ0KICAgIH0sIGJ1dHRvbnMgfHwge30pOw0KICAgIGxldCBwID0gYnV0dG9uczsNCiAgICBsZXQgZW5hYmxlZCA9IHRydWU7DQogICAgbGV0IGJhY2tCdXR0b25MYXN0RGF0ZSA9IG5ldyBEYXRlKCk7DQogICAgbGV0IGJhY2tCdXR0b25QcmVzc2VkT25SZXN1bHQgPSBmYWxzZTsNCg0KICAgIC8vIHJlc2V0IGNvbnNvbGUNCiAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7DQogICAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7DQogICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpOw0KICAgIHdpbmRvdy5jb25zb2xlID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuY29uc29sZTsNCg0KICAgIGNvbnN0DQogICAgICAgIGwgPSBjb25zb2xlLmxvZywNCiAgICAgICAgbG9jID0gd2luZG93LnNlcnZpY2VzLkxvY2FsaXphdGlvbiwNCiAgICAgICAgQkFDS19CVVRUT05fVEhSRVNIT0xEID0gNTAwLA0KICAgICAgICBkaXNwYXRjaE1vdXNlRXZlbnQgPSAoJHRhcmdldCwgZXZlbnROYW1lKSA9PiB7DQogICAgICAgICAgICBpZiAoJHRhcmdldC5sZW5ndGggPT0gMCkgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgY29uc3QgbW91c2VFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50cycpOw0KICAgICAgICAgICAgbW91c2VFdmVudC5pbml0RXZlbnQoZXZlbnROYW1lKTsNCiAgICAgICAgICAgICR0YXJnZXRbMF0uZGlzcGF0Y2hFdmVudChtb3VzZUV2ZW50KTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9LA0KICAgICAgICBtb3VzZURvd24gPSB0YXJnZXQgPT4gZGlzcGF0Y2hNb3VzZUV2ZW50KHRhcmdldCwgJ21vdXNlZG93bicpLA0KICAgICAgICBtb3VzZVVwID0gdGFyZ2V0ID0+IGRpc3BhdGNoTW91c2VFdmVudCh0YXJnZXQsICdtb3VzZXVwJyksDQogICAgICAgIG1vdXNlQ2xpY2sgPSAodGFyZ2V0LCBkZWxheSwgY2FsbGJhY2spID0+IHsNCiAgICAgICAgICAgIGlmKGRlbGF5KXsNCiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobW91c2VDbGljayh0YXJnZXQpKTsNCiAgICAgICAgICAgICAgICB9LCBkZWxheSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gbW91c2VEb3duKHRhcmdldCkgJiYgbW91c2VVcCh0YXJnZXQpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBidXlOb3cgPSAoY2FsbGJhY2spID0+IHsNCiAgICAgICAgICAgIGlmIChtb3VzZUNsaWNrKGJ1eUJ0bigpKSkgew0KICAgICAgICAgICAgICAgIGlmIChwLnJlc3VsdHMucHJlc3NFbnRlcikgew0KICAgICAgICAgICAgICAgICAgICB0cnlQcmVzc09rQnRuKGNhbGxiYWNrKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIHRyeVByZXNzT2tCdG4gPSAoY2FsbGJhY2spID0+IHsNCiAgICAgICAgICAgIGlmICghbW91c2VDbGljayhlbnRlckJ0bigpKSkgew0KICAgICAgICAgICAgICAgIGlmKGNhbGxiYWNrKXsNCiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChjYWxsYmFjayhmYWxzZSksIDApOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHRyeVByZXNzT2tCdG4sIDEwKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICBpZihjYWxsYmFjayl7DQogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgYmFjayA9ICgpID0+IHsNCiAgICAgICAgICAgIGwoJ2JhY2snKTsNCiAgICAgICAgICAgIC8vIGZvcmNlIGRvdWJsZSBiYWNrIHdoZW4gdGhlcmUgaXMgYSBjYXJkIG9uIHRoZSBsaXN0DQogICAgICAgICAgICAvLyBpZiAobmV3IERhdGUoKSAtIGJhY2tCdXR0b25MYXN0RGF0ZSA8IEJBQ0tfQlVUVE9OX1RIUkVTSE9MRCkgew0KICAgICAgICAgICAgLy8gICAgIHJldHVybjsNCiAgICAgICAgICAgIC8vIH0NCiAgICAgICAgICAgIC8vIGJhY2tCdXR0b25MYXN0RGF0ZSA9IG5ldyBEYXRlKCk7DQogICAgICAgICAgICBpZiAoIW1vdXNlQ2xpY2soYmFja0J0bigpKSkgew0KICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoYmFjaywgMSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0sDQoNCiAgICAgICAgc2VhcmNoID0gKCkgPT4gew0KICAgICAgICAgICAgbW91c2VDbGljayhzZWFyY2hCdG4oKSk7DQogICAgICAgICAgICBpZihwLnJlc3VsdHMuYXV0b0J1eSl7DQogICAgICAgICAgICAgICAgaWYoc2VhcmNoUmVzdWx0cygpID09IDApew0KICAgICAgICAgICAgICAgICAgICBsKCdyZXNlYXJjaGluZycpOw0KICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHNlYXJjaCwgMTApOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgbCgkKCIudXQtbm8tcmVzdWx0cy12aWV3IikubGVuZ3RoKTsNCiAgICAgICAgICAgICAgICAgICAgaWYoJCgiLnV0LW5vLXJlc3VsdHMtdmlldyIpLmxlbmd0aCA+IDApew0KICAgICAgICAgICAgICAgICAgICAgICAgbCgnbm8gcmVzdWx0cycpOw0KICAgICAgICAgICAgICAgICAgICAgICAgYmFjaygpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgbCgnYnV5aW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgICBidXlOb3coKGJvdWdodCkgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGJvdWdodCl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlQ2xpY2sodHJhbnNmZXJCdG4oKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIH0gICAgDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KDQogICAgICAgIHRyYW5zZmVyQnRuID0gKCkgPT4gJChgLnV0LWJ1dHRvbi1ncm91cCA+IGJ1dHRvbjpjb250YWlucygnJHtsb2MubG9jYWxpemUoJ2luZm9wYW5lbC5sYWJlbC5zZW5kVHJhZGVQaWxlJyl9JylgKSwNCiAgICAgICAgY2x1YkJ0biA9ICgpID0+ICQoYC51dC1idXR0b24tZ3JvdXAgPiBidXR0b246Y29udGFpbnMoJyR7bG9jLmxvY2FsaXplKCdpbmZvcGFuZWwubGFiZWwuc3RvcmVJbkNsdWInKX0nKWApLA0KICAgICAgICBzZWxsQnRuID0gKCkgPT4gJChgLnV0LWJ1dHRvbi1ncm91cCA+IGJ1dHRvbjpjb250YWlucygnJHtsb2MubG9jYWxpemUoJ2luZm9wYW5lbC5sYWJlbC5kaXNjYXJkJyl9JylgKSwNCiAgICAgICAgYnV5QnRuID0gKCkgPT4gJCgnLmJ1eUJ1dHRvbicpLA0KICAgICAgICBiYWNrQnRuID0gKCkgPT4gJCgnLnV0LW5hdmlnYXRpb24tYnV0dG9uLWNvbnRyb2wnKSwNCiAgICAgICAgZW50ZXJCdG4gPSAoKSA9PiQoJy5kaWFsb2ctYm9keSAudXQtYnV0dG9uLWdyb3VwIGJ1dHRvbjplcSgwKScpLA0KICAgICAgICBzZWFyY2hCdG4gPSAoKSA9PiAkKCcuYnV0dG9uLWNvbnRhaW5lciAuYnRuLXN0YW5kYXJkLmNhbGwtdG8tYWN0aW9uJyksDQogICAgICAgIHNlYXJjaFJlc3VsdHMgPSAoKSA9PiQoJy5TZWFyY2hSZXN1bHRzJykubGVuZ3RoLA0KDQogICAgICAgIGtleXMgPSAoKSA9PiB7DQogICAgICAgICAgICBsZXQgYiA9IHt9Ow0KDQogICAgICAgICAgICBiW3AuYmFja10gPSAoKSA9PiBiYWNrKCk7DQoNCiAgICAgICAgICAgIGlmICgkKCcudXQtbWFya2V0LXNlYXJjaC1maWx0ZXJzLXZpZXcnKS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgYltwLnNlYXJjaC5kZWNNaW5CaWRdID0gKCkgPT4gbW91c2VDbGljaygkKCcuZGVjcmVtZW50LXZhbHVlJykpOw0KICAgICAgICAgICAgICAgIGJbcC5zZWFyY2guaW5jTWluQmlkXSA9ICgpID0+IG1vdXNlQ2xpY2soJCgnLmluY3JlbWVudC12YWx1ZScpKTsNCiAgICAgICAgICAgICAgICBiW3Auc2VhcmNoLmRlY01heEJpZF0gPSAoKSA9PiBtb3VzZUNsaWNrKCQoJy5kZWNyZW1lbnQtdmFsdWU6ZXEoMSknKSk7DQogICAgICAgICAgICAgICAgYltwLnNlYXJjaC5pbmNNYXhCaWRdID0gKCkgPT4gbW91c2VDbGljaygkKCcuaW5jcmVtZW50LXZhbHVlOmVxKDEpJykpOw0KICAgICAgICAgICAgICAgIGJbcC5zZWFyY2guZGVjTWluQnV5XSA9ICgpID0+IG1vdXNlQ2xpY2soJCgnLmRlY3JlbWVudC12YWx1ZTplcSgyKScpKTsNCiAgICAgICAgICAgICAgICBiW3Auc2VhcmNoLmluY01pbkJ1eV0gPSAoKSA9PiBtb3VzZUNsaWNrKCQoJy5pbmNyZW1lbnQtdmFsdWU6ZXEoMiknKSk7DQogICAgICAgICAgICAgICAgYltwLnNlYXJjaC5kZWNNYXhCdXldID0gKCkgPT4gbW91c2VDbGljaygkKCcuZGVjcmVtZW50LXZhbHVlOmVxKDMpJykpOw0KICAgICAgICAgICAgICAgIGJbcC5zZWFyY2guaW5jTWF4QnV5XSA9ICgpID0+IG1vdXNlQ2xpY2soJCgnLmluY3JlbWVudC12YWx1ZTplcSgzKScpKTsNCiAgICAgICAgICAgICAgICBiW3Auc2VhcmNoLnNlYXJjaF0gPSAoKSA9PiBzZWFyY2goKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgIGxldCBpdGVtcyA9ICQoIi5saXN0RlVUSXRlbSIpOw0KICAgICAgICAgICAgICAgIGxldCBpdGVtc0V4aXN0cyA9IGl0ZW1zLmxlbmd0aCA+IDA7DQogICAgICAgICAgICAgICAgbGV0IGl0ZW1zQ29udGFpbmVyID0gaXRlbXMucGFyZW50cygnLnBhZ2luYXRlZCwgLnV0LXdhdGNoLWxpc3QtdmlldywgLnV0LXRyYW5zZmVyLWxpc3QtdmlldycpOw0KICAgICAgICAgICAgICAgIGlmIChpdGVtc0NvbnRhaW5lci5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICBpdGVtc0NvbnRhaW5lciA9IGl0ZW1zLnBhcmVudCgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoaXRlbXNFeGlzdHMgJiYgJCgnLkRldGFpbFBhbmVsID4gLmJpZE9wdGlvbnMnKS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgIGJbcC5yZXN1bHRzLmJpZF0gPSAoKSA9PiBtb3VzZUNsaWNrKCQoJy5iaWRCdXR0b24nKSk7DQogICAgICAgICAgICAgICAgICAgIGJbcC5yZXN1bHRzLmJ1eV0gPSAoKSA9PiBidXlOb3coKTsNCiAgICAgICAgICAgICAgICAgICAgYltwLnJlc3VsdHMuZGVjQmlkXSA9ICgpID0+IG1vdXNlQ2xpY2soJCgnLmJpZE9wdGlvbnMgLmRlY3JlbWVudC12YWx1ZScpKTsNCiAgICAgICAgICAgICAgICAgICAgYltwLnJlc3VsdHMuaW5jQmlkXSA9ICgpID0+IG1vdXNlQ2xpY2soJCgnLmJpZE9wdGlvbnMgLmluY3JlbWVudC12YWx1ZScpKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAoaXRlbXNFeGlzdHMgJiYgJCgnLkRldGFpbFBhbmVsID4gLnV0LWJ1dHRvbi1ncm91cCcpLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgYltwLnJlc3VsdHMudHJhbnNmZXJdID0gKCkgPT4gbW91c2VDbGljayh0cmFuc2ZlckJ0bigpKTsNCiAgICAgICAgICAgICAgICAgICAgYltwLnJlc3VsdHMuY2x1Yl0gPSAoKSA9PiBtb3VzZUNsaWNrKGNsdWJCdG4oKSk7DQogICAgICAgICAgICAgICAgICAgIGJbcC5yZXN1bHRzLnNlbGxdID0gKCkgPT4gbW91c2VDbGljayhzZWxsQnRuKCkpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChpdGVtc0V4aXN0cykgew0KICAgICAgICAgICAgICAgICAgICBiW3AubGlzdHMudXBdID0gKCkgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IGl0ZW1zQ29udGFpbmVyOw0KICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNlbGVjdGVkID0gJCgnLmxpc3RGVVRJdGVtLnNlbGVjdGVkJywgY29udGFpbmVyKS5wcmV2KCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZihzZWxlY3RlZC5sZW5ndGggPT09IDApew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gJCgiLmxpc3RGVVRJdGVtOmxhc3QtY2hpbGQiLCBjb250YWluZXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VDbGljayhzZWxlY3RlZCk7DQogICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuY3NzKCdwb3NpdGlvbicsICdyZWxhdGl2ZScpOw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnNjcm9sbFRvcChjb250YWluZXIuc2Nyb2xsVG9wKCkgKyBzZWxlY3RlZC5wb3NpdGlvbigpLnRvcCAtIHNlbGVjdGVkLmhlaWdodCgpKTsNCiAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICAgICAgYltwLmxpc3RzLmRvd25dID0gKCkgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IGl0ZW1zQ29udGFpbmVyOw0KICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNlbGVjdGVkID0gJCgnLmxpc3RGVVRJdGVtLnNlbGVjdGVkJywgY29udGFpbmVyKS5uZXh0KCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZihzZWxlY3RlZC5sZW5ndGggPT09IDApew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gJCgiLmxpc3RGVVRJdGVtOmZpcnN0LWNoaWxkIiwgY29udGFpbmVyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlQ2xpY2soc2VsZWN0ZWQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zY3JvbGxUb3AoY29udGFpbmVyLnNjcm9sbFRvcCgpICsgc2VsZWN0ZWQucG9zaXRpb24oKS50b3ApOw0KICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmICgkKCcucGFnaW5nQ29udGFpbmVyJykubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgICAgICBiW3AubGlzdHMucHJldl0gPSAoKSA9PiBtb3VzZUNsaWNrKCQoJy5wYWdpbmdDb250YWluZXIgLnByZXY6dmlzaWJsZScpKTsNCiAgICAgICAgICAgICAgICAgICAgYltwLmxpc3RzLm5leHRdID0gKCkgPT4gbW91c2VDbGljaygkKCcucGFnaW5nQ29udGFpbmVyIC5uZXh0OnZpc2libGUnKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gYjsNCiAgICAgICAgfTsNCg0KICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4gew0KICAgICAgICBpZiAoZS5rZXlDb2RlID09IHAuZW5hYmxlRGlzYWJsZSkgew0KICAgICAgICAgICAgZW5hYmxlZCA9ICFlbmFibGVkOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCFlbmFibGVkKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBsZXQgYWN0aW9uID0ga2V5cygpW2Uua2V5Q29kZV07DQogICAgICAgIGlmIChhY3Rpb24pIGFjdGlvbigpOw0KICAgIH0pOw0KfSkoKTsNCg=="