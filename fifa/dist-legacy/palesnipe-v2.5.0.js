window.paletools = window.paletools || {};
window.paletools['palesnipe-2.5.0'] = "(function (buttons) {
    const VERSION = "v2.5.0";

    buttons = $.extend({
        back: 'Digit1',
        enableDisable: 'Comma',
        lists: {
            up: 'ArrowUp',
            down: 'ArrowDown',
            prev: 'ArrowLeft',
            next: 'ArrowRight',
        },
        search: {
            resetBid: 'Backquote',
            decMinBid: 'ArrowLeft',
            incMinBid: 'ArrowRight',
            decMaxBid: 'End',
            incMaxBid: 'Home',
            decMinBuy: 'Delete',
            incMinBuy: 'PageDown',
            decMaxBuy: 'ArrowDown',
            incMaxBuy: 'ArrowUp',
            search: 'Digit2',
            botModeMinBid: 'BracketRight',
            botModeMinBuy: 'BracketLeft',
            enableBotMode: false
        },
        results: {
            bid: 'Digit4',
            buy: 'Digit3',
            transfer: 'KeyR',
            club: 'KeyC',
            pressEnter: true,
            autoBuy: false,
            preventBack: false,
            sell: 'KeyQ',
            decBid: 'Delete',
            incBid: 'PageDown'
        }
    }, buttons || {});
    let p = buttons;
    let enabled = true;
    let backButtonLastDate = new Date();
    let backButtonPressedOnResult = false;
    let appStyles = document.createElement("style");

    // reset console
    var iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    document.body.appendChild(iframe);
    window.console = iframe.contentWindow.console;

    window.MAX_NEW_ITEMS = Number.MAX_VALUE;


    UTPaginatedItemListView.prototype.setItems = function (e, i) {
        var o = this;
        return this.removeListRows(),
            e.forEach(function (e) {
                if (shouldRenderItem(e)) {
                    var t = new UTItemTableCellView;
                    t.setData(e, void 0, void 0, i),
                        o.listRows.push(t)
                }
            }),
            this.listRows
    }

    UTItemDAO.prototype._oldSearchTransferMarket = UTItemDAO.prototype.searchTransferMarket;
    UTItemDAO.prototype.searchTransferMarket = function (criteria, args) {
        let filters = getFilters();
        criteria.defId = filters.resourceId ? [parseInt(filters.resourceId)] : [];
        return this._oldSearchTransferMarket(criteria, args);
    }

    UTItemTableCellView.prototype._oldRender = UTItemTableCellView.prototype.render;
    UTItemTableCellView.prototype.render = function (e) {
        this._oldRender();
        if (this.data.isPlayer()) {
            $(".ut-item-view--main", this.__entityContainer).append(`<span class="player-definition-id">${this.data.definitionId}</span>`);
        }
    }

    function shouldRenderItem(item) {
        let rating = getFilters().rating;

        if (!rating) {
            return true;
        }
        else {
            if (rating.charAt(0) === "+") {
                rating = parseInt(rating.substr(1));
                return item.rating >= rating;
            }
            else if (rating.charAt(0) === "-") {
                rating = parseInt(rating.substr(1));
                return item.rating <= rating;
            }
            else {
                rating = parseInt(rating);
                return item.rating == rating;
            }
        }
    }

    UTItemDomainRepository.prototype.isPileFull = function (e) {
        var t = 0
            , i = this.pileSizes.get(e);
        switch (e) {
            case ItemPile.PURCHASED:
                t = this.unassigned.length;
                break;
            case ItemPile.TRANSFER:
                t = this.transfer.length;
                break;
            case ItemPile.INBOX:
                return 0;
            case ItemPile.CLUB:
                return !1
        }
        return (i || 0) <= t
    }

    const
        l = console.log,
        loc = window.services.Localization,
        BACK_BUTTON_THRESHOLD = 500,
        header = $('.ut-fifa-header-view'),
        getFilters = () => {
            return {
                rating: $('#filter-player-rating').val(),
                resourceId: $('#filter-player-resource-id').val()
            }
        },
        dispatchMouseEvent = ($target, eventName) => {
            if ($target.length == 0) return false;
            const mouseEvent = document.createEvent('MouseEvents');
            mouseEvent.initEvent(eventName);
            $target[0].dispatchEvent(mouseEvent);
            return true;
        },
        mouseDown = target => dispatchMouseEvent(target, 'mousedown'),
        mouseUp = target => dispatchMouseEvent(target, 'mouseup'),
        mouseClick = (target, delay, callback) => {
            if (delay) {
                setTimeout(() => {
                    callback(mouseClick(target));
                }, delay);
            }
            else {
                return mouseDown(target) && mouseUp(target);
            }
        },
        buyNow = (callback) => {
            if (mouseClick(buyBtn())) {
                if (p.results.pressEnter) {
                    tryPressOkBtn(callback);
                }
            }
        },
        tryPressOkBtn = (callback) => {
            if (!mouseClick(enterBtn())) {
                if (callback) {
                    setTimeout(callback(false), 0);
                }

                setTimeout(tryPressOkBtn, 10);
                return;
            }
            else {
                if (callback) {
                    callback(true);
                }
                updateBoughtUI();
            }
        },
        back = () => {
            l('back');
            // force double back when there is a card on the list
            // if (new Date() - backButtonLastDate < BACK_BUTTON_THRESHOLD) {
            //     return;
            // }
            // backButtonLastDate = new Date();
            if (!mouseClick(backBtn())) {
                setTimeout(back, 1);
            }
        },

        search = () => {
            mouseClick(searchBtn());
            if (p.results.autoBuy) {
                if (searchResults() == 0) {
                    l('researching');
                    setTimeout(search, 10);
                }
                else {
                    l($(".ut-no-results-view").length);
                    if ($(".ut-no-results-view").length > 0) {
                        l('no results');
                        back();
                    }
                    else {
                        l('buying');
                        buyNow((bought) => {
                            if (bought) {
                                mouseClick(transferBtn());
                            }
                        });
                    }
                }
            }
        },

        transferBtn = () => $(`.ut-button-group > button:contains('${loc.localize('infopanel.label.sendTradePile')}')`),
        clubBtn = () => $(`.ut-button-group > button:contains('${loc.localize('infopanel.label.storeInClub')}')`),
        sellBtn = () => $(`.ut-button-group > button:contains('${loc.localize('infopanel.label.discard')}')`),
        buyBtn = () => $('.buyButton'),
        backBtn = () => $('.ut-navigation-button-control'),
        enterBtn = () => $('.ea-dialog-view .ut-button-group button:eq(0)'),
        searchBtn = () => $('.button-container .btn-standard.call-to-action'),
        searchResults = () => $('.SearchResults').length,


        keys = () => {
            let b = {};

            b[p.back] = () => back();

            if ($('.ut-market-search-filters-view').length > 0) {
                b[p.search.decMinBid] = () => mouseClick($('.decrement-value'));
                b[p.search.incMinBid] = () => mouseClick($('.increment-value'));
                b[p.search.decMaxBid] = () => mouseClick($('.decrement-value:eq(1)'));
                b[p.search.incMaxBid] = () => mouseClick($('.increment-value:eq(1)'));
                b[p.search.decMinBuy] = () => mouseClick($('.decrement-value:eq(2)'));
                b[p.search.incMinBuy] = () => mouseClick($('.increment-value:eq(2)'));
                b[p.search.decMaxBuy] = () => mouseClick($('.decrement-value:eq(3)'));
                b[p.search.incMaxBuy] = () => mouseClick($('.increment-value:eq(3)'));
                b[p.search.search] = () => search();
                b[p.search.resetBid] = () => mouseClick($('.search-price-header > button:first'));
                b[p.search.botModeMinBid] = () => {
                    if (b.search.enableBotMode && b[p.search.incMinBid]()) {
                        search();
                    }
                };
                b[p.search.botModeMinBuy] = () => {
                    if (b.search.enableBotMode && b[p.search.incMinBuy]()) {
                        search();
                    }
                }
            }
            else {
                let items = $(".listFUTItem");
                let itemsExists = items.length > 0;
                let itemsContainer = items.parents('.paginated, .ut-watch-list-view, .ut-transfer-list-view');
                if (itemsContainer.length == 0) {
                    itemsContainer = items.parent();
                }

                if (itemsExists && $('.DetailPanel > .bidOptions').length > 0) {
                    b[p.results.bid] = () => mouseClick($('.bidButton'));
                    b[p.results.buy] = () => buyNow();
                    b[p.results.decBid] = () => mouseClick($('.bidOptions .decrement-value'));
                    b[p.results.incBid] = () => mouseClick($('.bidOptions .increment-value'));
                    b[p.search.botModeMinBid] = () => b.search.enableBotMode ? buyNow() : false;
                    b[p.search.botModeMinBuy] = () => b.search.enableBotMode ? buyNow() : false;
                }

                if (itemsExists && $('.DetailPanel > .ut-button-group').length > 0) {
                    b[p.results.transfer] = () => mouseClick(transferBtn());
                    b[p.results.club] = () => mouseClick(clubBtn());
                    b[p.results.sell] = () => mouseClick(sellBtn());
                }

                if (itemsExists) {
                    b[p.lists.up] = () => {
                        let container = itemsContainer;
                        let selected = $('.listFUTItem.selected', container).prev();
                        if (selected.length === 0) {
                            selected = $(".listFUTItem:last-child", container);
                        }
                        mouseClick(selected);
                        container.css('position', 'relative');
                        container.scrollTop(container.scrollTop() + selected.position().top - selected.height());
                    };
                    b[p.lists.down] = () => {
                        let container = itemsContainer;
                        let selected = $('.listFUTItem.selected', container).next();
                        if (selected.length === 0) {
                            selected = $(".listFUTItem:first-child", container);
                        }
                        mouseClick(selected);
                        container.css('position', 'relative');
                        container.scrollTop(container.scrollTop() + selected.position().top);
                    };
                }
                else {
                    b[p.search.botModeMinBid] = () => b.search.enableBotMode ? back() : false;
                    b[p.search.botModeMinBuy] = () => b.search.enableBotMode ? back() : false;
                }

                if ($('.pagingContainer').length > 0) {
                    b[p.lists.prev] = () => mouseClick($('.pagingContainer .prev:visible'));
                    b[p.lists.next] = () => mouseClick($('.pagingContainer .next:visible'));
                }
            }

            return b;
        };

    // UI update after buy now
    const updateBoughtUI = () => {
        if (!enabled) return;

        var txBtn = transferBtn();
        if (txBtn.length == 0) {
            setTimeout(updateBoughtUI, 50);
            return;
        }

        let upd = (t, tx) => {
            if (!t) return;
            let add = ` [ ${p.results[tx]} ]`;
            let html = t.html();
            if (html && html.indexOf(add) == -1) {
                t.html(t.html() + add);
            }
        }

        upd(txBtn, 'transfer');
        upd(clubBtn(), 'club');
        upd(sellBtn(), 'sell');
    };

    const addCss = () => {
        let btn = (q, k1, k2, inc) => `${q} .${(inc ? 'in' : 'de')}crement-value:after { font-size:10px; display:block; margin-top:-30px; content: '[ ${p[k1][k2]} ]' }`;
        let sp1 = (i, k, inc) => btn(`.search-prices .price-filter:nth-child(${i})`, 'search', k, inc);
        let sp2 = (i, k1, k2) => `${sp1(i, k1)}${sp1(i, k2, true)}`;
        let css = `
            ${sp2(2, 'decMinBid', 'incMinBid')}
            ${sp2(3, 'decMaxBid', 'incMaxBid')}
            ${sp2(5, 'decMinBuy', 'incMinBuy')}
            ${sp2(6, 'decMaxBuy', 'incMaxBuy')}
            ${btn('.DetailPanel > .bidOptions', 'results', 'decBid', false)}
            ${btn('.DetailPanel > .bidOptions', 'results', 'incBid', true)}
            .ut-market-search-filters-view .call-to-action:after { content: '[ ${p.search.search}]'}
            .ut-market-search-filters-view .search-price-header:first-child > button:after { content: '[ ${p.search.resetBid}]';  font-size: 10px; display: block  }
            .ut-navigation-button-control:after { font-size:10px; float:right; margin-right:12px; content: '[ ${p.back} ]' }
            .pagingContainer .prev:after { font-size: 10px; display:block; content: '[ ${p.lists.prev} ]' }
            .pagingContainer .next:after { font-size: 10px; display:block; content: '[ ${p.lists.next} ]' }
            .bidButton:after { content: ' [ ${p.results.bid} ]' }
            .buyButton:before { float:right; content: ' [ ${p.results.buy} ]' }
            `;

        appStyles.innerText = css;
    };

    const addFilters = () => {
        header.append(`| Filter: Rating: <input type="text" id="filter-player-rating" style="width: 60px" /> | Id: <input type="text" id="filter-player-resource-id" style="width: 200px" />`);
    };

    function enableDisableApp() {
        if (enabled) {
            disableApp();
        }
        else {
            enableApp();
        }
    }

    function enableApp() {
        enabled = true;
        document.body.appendChild(appStyles);
        services.Notification.queue(["Palesnipe Enabled", UINotificationType.POSITIVE])
    }

    function disableApp() {
        enabled = false;
        document.body.removeChild(appStyles);
        services.Notification.queue(["Palesnipe Disabled", UINotificationType.NEUTRAL])
    }

    document.body.addEventListener('keydown', e => {
        if (e.code == p.enableDisable) {
            enableDisableApp();
        }

        if (!enabled) {
            return;
        }

        let action = keys()[e.code];
        if (action) action();
    });

    addCss();
    addFilters();
    enableApp();
})(/*BUTTONS*/);"